using NPOI.SS.UserModel;
using System;
using System.IO;
using System.Text;

namespace Crofana.Config.Generator
{
    public class Program
    {
        private static void Main(string[] args)
        {
            if (args.Length < 2)
            {
                Console.WriteLine("参数错误，需要两个参数：1.数据源根目录，2.C#代码输出路径");
                Console.Write("参数错误，按任意键退出...");
                Console.ReadKey();
                return;
            }
            var inPath = args[0];
            var outPath = args[1];

            GenerateCodeRecursively(inPath, outPath);

            Console.Write("生成完成，按任意键退出...");
            Console.ReadKey();
        }

        private static void GenerateCodeRecursively(string inPath, string outPath)
        {
            foreach (var file in Directory.GetFiles(inPath))
            {
                if (Path.GetExtension(file) == ".xlsx")
                {
                    Generate(file, outPath);
                }
            }
            foreach (var dir in Directory.GetDirectories(inPath))
            {
                GenerateCodeRecursively(dir, outPath);
            }
        }

        private static void Generate(string inPath, string outPath)
        {
            var workbook = WorkbookFactory.Create(inPath);
            var dataSheet = workbook.GetSheetAt(0);
            var fullTypeName = dataSheet.SheetName;
            var declareRow = dataSheet.GetRow(0);

            var splitTypeName = fullTypeName.Split('.');
            var typeName = splitTypeName[splitTypeName.Length - 1];
            var @namespace = string.Empty;
            if (splitTypeName.Length > 1)
            {
                var namespaceBuilder = new StringBuilder();
                for (int i = 0; i < splitTypeName.Length - 1; i++)
                {
                    namespaceBuilder.Append(splitTypeName[i]).Append('.');
                }
                @namespace = namespaceBuilder.Remove(namespaceBuilder.Length - 1, 1).ToString();
            }
            var codeBuilder = new StringBuilder();
            var hasNamespace = (@namespace.Length > 0);
            if (hasNamespace)
            {
                codeBuilder.Append("////////////////////////////////////////////////////////////////////////////\n")
                           .Append("// THIS FILE IS GENERATED BY CROFANA CONFIG GENERATOR, DO NOT MODIFY!\n")
                           .Append($"// GENERATE TIME: {DateTime.Now}\n")
                           .Append("////////////////////////////////////////////////////////////////////////////\n\n")
                           .Append($"namespace {@namespace}\n")
                           .Append("{\n");
            }

            Action<string> build = str =>
            {
                codeBuilder.Append(hasNamespace ? "\t" : string.Empty).Append(str).Append("\n");
            };

            build($"public class {typeName} : Crofana.Config.Abstractions.IConfig");
            build("{");
            build("\tpublic long Id { get; private set; }");
            build("\tpublic bool IsSetupProperly => Id > 0;");
            for (int i = 1; i < declareRow.LastCellNum; i++)
            {
                var split = declareRow.GetCell(i).ToString().Split(':');
                build($"\tpublic {split[1]} {split[0]} {{ get; private set; }}");
            }
            build("}");

            if (hasNamespace)
            {
                codeBuilder.Append("}\n");
            }

            var fileName = $"{typeName}.cs";
            var filePath = Path.Combine(outPath, fileName);
            File.WriteAllText($"{filePath}", codeBuilder.ToString());
            Console.WriteLine($"生成成功：{filePath}");
        }
    }
}
